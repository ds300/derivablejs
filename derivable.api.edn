(:module derivable
  "DerivableJS is an holistic state management library. This is its API documentation.
  "

  (:interface (Derivable T)
    "A thing that is derivable"
    ((derive E) [f (=> [value T] E)] (Derivable E)
      "Creates a new derivation based on the application of {{f}} to the
      current value of this derivable. e.g.

      ```javascript
      const x = atom(4);
      const timesTwo = (n) => n * 2;
      const xTimesTwo = x.derive(timesTwo);

      xTimesTwo.get();
      // => 8
      ```")

    (derive [prop (or string (Derivable string))] (Derivable any)
      "Creates a new derivation based on property lookup. e.g.

      ```javascript
      const obj = atom({foo: 'FOO!', bar: 'BAR!'});
      const foo = obj.derive('foo');

      foo.get();
      // => 'FOO!'
      ```

      ```javascript
      const obj = atom({foo: 'FOO!', bar: 'BAR!'});
      const prop = atom('foo');
      const item = obj.derive(prop);

      item.get();
      // => 'FOO!'

      prop.set('bar');
      item.get();
      // => 'BAR!'
      ```")

    (derive [index (or number (Derivable number))] (Derivable any)
      "Creates a new derivation based on index lookup. e.g.

      ```javascript
      const arr = atom(['one', 'two', 'three']);
      const middle = arr.derive(1);

      middle.get();
      // => 'two'
      ```

      ```javascript
      const arr = atom(['one', 'two', 'three']);
      const idx = atom(0);
      const item = arr.derive(idx);

      item.get();
      // => 'one'

      idx.set(1);
      item.get();
      // => 'two'
      ```
      ")

    (derive [re (or RegExp (Derivable RegExp))] (Derivable [string])
      "Creates a new derivation based on regexp matching. e.g.

      ```javascript
      const str = atom('hello there');
      const match = str.derive(/\\w+/g);

      match.get()
      // => ['hello', 'there']
      ```

      ```javascript
      const str = atom('hello there');
      const re = atom(/\\w+/);
      const match = str.derive(re);

      match.get()
      // => [ 'hello', index: 0, input: 'hello there' ]

      re.set(/e.*?\\b/g);
      match.get()
      // => ['ello', 'ere']
      ```
      ")

    ((derive E) [f (Derivable (=> [value T] E))] (Derivable E)
      "Creates a new derivation based on the application of {{f}} to the
      current value of this derivable. e.g.

      ```javascript
      const x = atom(4);
      const timesTwo = (n) => n * 2;
      const timesFour = (n) => n * 4;
      const f = atom(timesTwo);
      const fx = x.derive(f);

      fx.get();
      // => 8

      f.set(timesFour);
      fx.get();
      // => 16
      ```")

    (derive [args [any]] [(Derivable any)]
      "Lets one combine all the above and destructure the result. e.g.

      ```javascript
      const x = atom('hello there');
      const index = atom(0);

      const [words, len, upper, char] = x.derive([
        /\\w+/g, 'length', s => s.toUpperCase(), index
      ]);

      words.get();
      // => ['hello', 'there']

      len.get();
      // => 11

      upper.get();
      // => 'HELLO THERE'

      char.get();
      // => 'h'

      index.set(2);
      char.get();
      // => 'l'
      ```")


    ((derive A E) [f (=> [value T a A] E) a (or A (Derivable A))] (Derivable E)
      "Creates a new derivation based on the application of {{f}} to the
      current value of this derivable and {{a}}. e.g.

      ```javascript
      const x = atom(4);
      const times = (a, b) => a * b;
      const xTimesTwo = x.derive(times, 2);

      xTimesTwo.get();
      // => 8
      ```

      ```javascript
      const y = atom(5);
      const xTimesY = x.derive(times, y);

      xTimesY.get();
      // => 20

      y.set(10);
      xTimesY.get();
      // => 40
      ```
      ")

    ((derive A B E) [f (=> [value T a A b B] E) a (or A (Derivable A)) b (or B (Derivable B))] (Derivable E))

    ((derive E) [f (=> [value T &args [any]] E) &args [any]] (Derivable E)
      "Any-arity version of above. Unpacks all args."
      (:see-also unpack))

    ((mDerive E) [f (=> [value T] E)] (Derivable E)
      "nil-shortcutting version of {{derive}}. e.g.

      ```javascript
      const x = atom(null);
      const timesTwo = (n) => n * 2;
      const xTimesTwo = x.derive(timesTwo);
      const mXTimesTwo = x.mDerive(timesTwo);

      mXTimesTwo.get();
      // => null

      xTimesTwo.get();
      // throws error because we try to multiply null by 2

      ```")

    ((mDerive A E) [f (=> [value T a A] E) a (or A (Derivable A))] (Derivable E))

    ((mDerive A B E) [f (=> [value T a A b B] E) a (or A (Derivable A)) b (or B (Derivable B))] (Derivable E))

    ((mDerive E) [f (=> [value T &args [any]] E) &args [any]] (Derivable E))

    (react [f (=> [value T] void) options? Lifecycle] void
      "Declares an anonymous reactor based on {{f}} being applied to this derivable.

      The default lifecycle options are:

      ```javascript
      {
        from: true,   // i.e. the reactor is initialized immediately
        when: true,   // i.e. the reactor is always active
        until: false, // i.e. the reactor is never killed
        skipFirst: false,
        once: false
      }
      ```

      e.g.

      ```javascript
      const n = atom(0);

      n.react(n => console.log(`n is ${n}`), {
        from: () => n.get() > 0,      // start when n > 0
        when: () => n.get() %2 === 0, // only react when n is even
        until: () => n.get() => 5     // stop when n >= 5
      });
      // ... no output

      n.set(1);
      // ... no output (n is odd)

      n.set(2);
      // $> n is 2

      n.set(3);
      // ... no output (n is odd)

      n.set(4);
      // $> n is 4

      n.set(5);
      // ... no output (reactor was killed)

      n.set(4);
      // ... no output (reactors don't come back from the dead)
      ```
      ")

    (mReact [f (=> [value T] void) options? Lifecycle] void
      "As {{react}} but reactions only take place when the value held in this
      derivable is not `null` or `undefined`.")


    (get [] T
      "Returns the current value of this derivable.

      ```javascript
      const x = atom(`a string`);
      x.get();
      // => 'a string'
      ```")

    (is [other any] (Derivable boolean)
      "Returns a derivable which represents the equality of the values held in
      this and {{other}}.

      ```javascript
      let a = atom(`a`),
          b = atom(`b`);

      let same = a.is(b);

      same.get();
      // => false

      b.set(`a`);

      same.get();
      // => true
      ```
      ")

    (and [other any] (Derivable any)
      "Returns a derivable which represents the boolean AND composition of the
      values held in this and {{other}}.

      ```javascript
      const condition = atom(`truthy value`);

      const result = condition.and(`yes truthy`);

      result.get();
      // => `yes truthy`

      condition.set(false);

      result.get();
      // => false
      ```

      `other` can be a derivable.

      ```javascript
      const result2 = result.and(condition.derive(s => s.split(` `)[0]));

      result2.get();
      // => false

      condition.set(`some string`);

      result2.get();
      // => `some`
      ```

      Due to derivable's laziness, we can be sure that the derivation of
      `condition` (the string splitting bit) will only ever be evaluated
      when `condition` contains a truthy value.")

    (mAnd [other any] (Derivable any)
      "Returns a derivable which represents {{other}} iff this derivable doesn't
      represent `null` or `undefined`. Otherwise the returned derivable
      representsthe same value as this derivable.")

    (or [other any] (Derivable any)
      "Returns a derivable which represents the boolean OR composition of the
      values held in this and {{other}}.

      ```javascript
      const first = atom(`truthy value`);
      const second = atom(false);

      first.or(second).get();
      // => `truthy value`

      second.or(first).get();
      // => `truthy value`

      first.set(false);

      second.or(first).get();
      // => false

      first.set(`first`);
      second.set(`second`);

      first.or(second).get();
      // => `first`

      second.or(first).get();
      // => `second`
      ```")

    (mOr [other any] (Derivable any)
      "Returns a derivable which represents {{other}} iff this derivable
      represents `null` or `undefined`. Otherwise represents the same value as
      this derivable")

    (then [thenD any, elseD any] (Derivable any)
      "Returns a derivable which represents the value of {{thenD}} if this is
      truthy, or {{elseD}} otherwise.

      Equivalent to:

      ```javascript
      this.and(thenD).or(elseD);
      ```")

    (mThen [thenD any, elseD any] (Derivable any)
      "Returns a derivable which represents the value of {{thenD}} if this is
      not `null` or `undefined`, otherwise {{elseD}}.")

    (not [] (Derivable boolean)
      "Returns a derivable which represents the boolean complement of the
      truthiness of the the value represented by this.

      Equivalent to:

      ```javascript
      this.derive(x => !x);
      ```")

    (switch [&args [any]] (Derivable any)
      "{{&args}} is a flat list of (comparatee, value) pairs. If the value
      represented by this derivable is equal to a comparatee (which can be derivable or not),
      a derivable representing the comparatee's corresponding value is returned. If none match,
      the value represented is `undefined` unless a trailing value is supplied.

      ```javascript
      const x = atom(3);

      const y = x.switch(
        1, `one`,
        2, `two`,
        3, `three`
      );

      y.get();
      // => `three`

      x.set(4);

      y.get();
      // => undefined

      const z = x.switch(
        5, `five`,
        6, `six`,
        `other`
      );

      z.get();
      // => `other`
      ```")
    (withEquality [equals (=> [a any b any] boolean)] this
      "Returns an copy of this derivable, except the equality checking
      logic is provided by {{equals}}.

      DerivableJS provides strict equality checking by default, delegating to a
      .equals method if present. But if e.g. you need deep equality checking for
      plain objects as provided by some `deepEquals` function:

      ```javascript
      const $SomeState = atom({blah: true})
        .withEquality(deepEquals);

      $SomeState.reactor(() => console.log('side effects!')).start();

      $SomeState.set({blah: true});
      // no side effects occurred!
      ```"))

  (:interface (Atom T)
    "Represents a mutable reference. Should hold immutable, or effectively
    immutable data."
    (:extends (Derivable T))
    ((set E) [value E] (Atom E)
      "Sets the value of this atom to be {{value}}, returns this atom")
    ((swap E) [f (=> [value T &args [any]] E), &args [any]] (Atom E)
      "Sets the value of this atom to be the value returned when {{f}} is applied
      to the current value of this and {{&args}}. Returns this.

      Equivalent to:

      ```javascript
      this.set(f.apply(null, [this.get()].concat(args)));
      ```")
    ((proxy E) [proxy (Proxy T E)] (Atom E)
      "Returns a new atom connected to this one via the logic encapsulated by
      {{proxy}}."

      (:see-also Proxy)))

  (:interface (Proxy ParentType ChildType)
    "The value returned from {{Atom::proxy}} is a *proxied* atom. This is a kind
    of cross between an atom and a derivation.
    It acts as a mutable proxy for some base atom, which lets consumers modify
    the base atom without knowing precisely how. This knowledge is encoded in a
    proxy as {{get}} and {{set}} functions.

    For example, you could (but probably shouldn't) store your entire
    application state as a json string, e.g.

    ```javascript
    const jsonState = atom(JSON.stringify({
      username: `Tigran`,
      sessionID: `x3rfs`
    }));
    ```

    and then use you could create a generic json proxy to access and mutate properties
    within that string:

    ```javascript
    function jsonProxy (prop) {
      return {
        get (json) {
          return JSON.parse(json)[prop];
        },
        set (json, value) {
          let state = JSON.parse(json);
          state[prop] = value;
          return JSON.stringify(state);
        }
      }
    }

    const username = jsonState.proxy(jsonProxy(`username`));

    username.get();
    // => `Tigran`

    username.set(`Franny`);

    jsonState.get();
    // => `{\"username\": \"Franny\", \"sessionID\": \"x3rfs\"}`

    username.get();
    // => `Franny`
    ```

    If someone has the `username` atom, they can be completely oblivious to the
    fact that it is an abstraction over a json string, treating it like a normal
    atom. This is the power of proxies!

    But proxies also *compose*!

    For example, if wanted to pass `username` to someone who can only read
    backwards, we could do the following:

    ```javascript
    function stringReverse (s) {
      let result = ``;
      for (let c of s) {
        result = c + result;
      }
      return result;
    }
    const reverseProxy = {
      get: s => stringReverse(s),
      set: (_, s) => stringReverse(s)
    };

    const emanresu = username.proxy(reverseProxy);

    emanresu.get();
    // => `ynnarF`

    emanresu.set(`drahciR`);

    jsonState.get();
    // => `{\"username\": \"Richard\", \"sessionID\": \"x3rfs\"}`
    ```

    Now the poor soul who can only read backwards doesn't ever have to think
    about reversing strings ever again.
    "
    (get [source ParentType] ChildType
      "Returns the proxied value extracted from {{source}}.

      Called with `this` set to `null`.")
    (set [source ParentType, value ChildType] ParentType
      "Returns the transformed version of {{source}} which includes {{value}}.

      Called with `this` set to `null`."))

  (:interface (CompositeProxy T)
    "Respresents a proxy over one or more atoms, using lexical closures to
    imperatively retrieve and set values from/to the atoms in question.

    For use with the {{proxy}} top level function.

    ```javascript
    const $FirstName = atom('John');
    const $LastName = atom('Steinbeck');

    const $Name = proxy({
      get: () => $FirstName.get() + ' ' + $LastName.get(),
      set: (val) => {
        const [first, last] = val.split(' ');
        $FirstName.set(first);
        $LastName.set(last);
      }
    });

    $Name.get(); // => 'John Steinbeck'

    $Name.set('James Joyce').

    $LastName.get(); // => 'Joyce'
    ```"
    (get [] T
      "Should dereference one or more derivables to return a value of type T")
    (set [value T] void
      "Should propagate {{value}} back up to any relevant atoms.")

    (:see-also proxy))

  (:interface Lifecycle
    "This lets one configure the lifecycle of reactors. There are three core
    options:

    - `from` - used to determine the start of a reactor's lifecycle
    - `when` - used to toggle activity during a reactor's lifecycle
    - `until` - used to determine the end of a reactor's lifecycle

    Each of these options may be set as either a derivable boolean, or as a
    function of no arguments which may be passed to {{derivation}} to create a
    derivable boolean.

    There are two additional convenience options to provide behaviour for common
    use cases:

    - `skipFirst` - causes the first invocation of the reactor to be ignored
    - `once` - causes the reactor to be killed immediately following its first invocation

    In addition, one may use this configuration object to override the `.onStart` and `.onStop` hooks."

    (:property from? (or (or (=> [] boolean)) (Derivable boolean))
      "Used to determine the start of the reactor's lifecycle. When it becomes
      truthy, the reactor is initialized. After which point this property is not
      used.")
    (:property when? (or (or (=> [] boolean)) (Derivable boolean))
      "Causes the reactor to be started and stopped based on the truthiness
      of the given condition.")
    (:property until? (or (or (=> [] boolean)) (Derivable boolean))
      "Used to determine the end of a reactor's lifecycle. When it becomes truthy
      the reactor is killed, after which point the reactor will never be used again
      and is eligible for garbage collection.")

    (:property skipFirst? boolean
      "Causes the first invocation (and only the first invocation) of the reactor
      to be ingored.

      **It is normally a code smell to use this.**")

    (:property once? boolean
      "Causes the reactor to be killed immediately following its first invocation
      (not counting the skipped invocation, if `skipFirst` is set to true)."))

  ((atom T) [value T] (Atom T)
    "Returns a new {{Atom}} containing {{value}}.

    ```javascript
    const myAtom = atom(`a string`);

    myAtom.get();
    // => `a string`
    ```")

  ((derivation T) [f (=> [] T)] (Derivable T)
    "Returns a new derivable encapsulating the result returned by `f` which
    should be pure aside from dereferencing one or more {{Derivable}}s.

    ```javascript
    const x = atom(1),
          y = atom(2);

    const z = derivation(() => x.get() + y.get());

    z.get();
    // => 3

    x.set(2);
    z.get();
    // => 4

    ```")

  ((proxy T) [proxy (CompositeProxy T)] (Atom T)
    "Creates a new proxied atom using the given composite proxy descriptor."
    (:see-also CompositeProxy))

  (transact [f (=> [] void)] void
    "Executes {{f}} in the context of a transaction.

    In a transactional context, changes to atoms do not have side effects. All
    changes made during the transaction are propagated for side effects when the
    transaction commits.

    ```javascript
    const firstName = `Joe`,
          lastName = `Schmoe`;

    derive`My name is ${firstName} ${lastName}`.react(
      x => console.log(x);
    );
    // $> My name is Joe Schmoe
    ```

    All good, but now we want to change the name to Tigran Hamasayan.

    ```javascript
    firstName.set(`Tigran`);
    // $> My name is Tigran Schmoe
    ```

    Doh! Tigran Schmoe isn't a person! We certainly don't want reactors to think
    he is, that could be totally confusing for someone.

    {{transact}} to the rescue! Let's abort the previous mission and try changing
    the name to William Blake without ever having a William Schmoe.

    ```javascript
    transact(() => {
      firstName.set(`William`);
      lastName.set(`Blake`);
    });
    // $> My name is William Blake
    ```

    Success!
    ")

  (transaction
    [f (=> [&args [any]] any)]
    (=> [&args [any]] any)
    "Wraps {{f}} such that its body is executed in a transaction. Preserves
    its input and output semantics.

    ```javascript
    const firstName = `Joe`,
    lastName = `Schmoe`;

    derive`My name is ${firstName} ${lastName}`.react(
      x => console.log(x);
    );
    // $> My name is Joe Schmoe

    setTimeout(transaction(() => {
      firstName.set(`William`);
      lastName.set(`Blake`);
    }), 1000);

    // ... 1 second later ...
    // $> My name is William Blake
    ```"
    (:see-also transact))

  (atomically [f (=> [] void)] void
    "as {{transact}} but will not create a (nested) transaction if already in
    a transaction.")

  (atomic
    [f (=> [&args [any]] any)]
    (=> [&args [any]] any)
    "as {{transaction}} but will not create a (nested) transaction if the
    returned function is invoked within a transaction.")

  (struct [obj any] (Derivable any)
    "Given some plain JavaScript `Object` or `Array` (or some nested combination thereof)
    containing one or more derivable things,
    returns a new derivable representing the input collection with unpacked
    values. e.g.

    ```javascript
    const a = atom(`Andrew`),
          b = atom(`Bernice`),
          c = atom(`Charlie`);

    const together = struct({a: a, bandc: [b, c]});

    together.react(names => {
      console.log(`A stands for ${names.a}`);
      console.log(`B stands for ${names.bandc[0]}`);
      console.log(`C stands for ${names.bandc[1]}`);
    });
    // $> A stands for Andrew
    // $> B stands for Bernice
    // $> C stands for Charlie

    c.set(`Chris`);
    // $> A stands for Andrew
    // $> B stands for Bernice
    // $> C stands for Chris
    ```")

  (unpack [obj any] any
    "If {{obj}} is derivable, returns `obj.get()`, otherwise returns {{obj}}.")


  (lift [f (=> [&args [any]] any)] (=> [&args [(Derivable any)]] (Derivable any))
    "Lifts a function that works on normal values to work on derivable values.

    ```javascript
    const add = (a, b) => a + b,
          x = atom(5),
          y = atom(10);

    const addD = lift(add);

    const xplusy = addD(x, y);

    xplusy.get();
    // => 15

    x.set(20);

    xplusy.get();
    // => 30
    ```")

  ((lift A B E) [f (=> [a A b B] E)] (=> [a (or A (Derivable A)) b (or B (Derivable B))] (Derivable E)))
  ((lift A B C E) [f (=> [a A b B c C] E)] (=> [a (or A (Derivable A)) b (or B (Derivable B)) c (or C (Derivable C))] (Derivable E)))

  (isAtom [obj any] boolean
    "Returns true iff {{obj}} is an {{Atom}}.")

  (isDerivable [obj any] boolean
    "Returns true iff {{obj}} is a {{Derivable}}.")

  (isDerivation [obj any] boolean
    "Returns true iff {{obj}} is a derivation,
    i.e. a derivable which is not an atom.")

  (isProxied [obj any] boolean
    "Returns true iff {{obj}} is a *proxied* atom."
    (:see-also Proxy Atom::proxy))

  (derive [strings [string] &things [any]] (Derivable string)
    "Tagged template string version of derive. Returns a derivable which
    represents {{strings}} interploated with {{&things}}, which latter may
    contain derivables.

    ```javascript
    const myAtom = atom(`what`),
          myConstant = 4;

    const myString =
      derive`Atom: '${myAtom}', constant: ${myConstant}.`;

    myString.get();
    // => `Atom: 'what', constant: 4.`

    myAtom.set(`nothing`);

    myString.get();
    // => `Atom: 'nothing', constant: 4.`

    ```")

  (or [&conditions [any]] (Derivable any)
    "Returns a derivable which represents the first value in {{&conditions}}
    which is truthy when passed through {{unpack}};

    ```javascript
    or(false, false, null, undefined, 0, ``, `yes`).get();
    // => `yes`

    or(atom(false),
       atom(null),
       atom(undefined),
       atom(0),
       atom(``),
       atom(`yes`)).get();
    // => `yes`
    ```"
    (:see-also Derivable::or))

  (mOr [&conditions [any]] (Derivable any)
    "Returns a derivable which encapsulates the first non-(null-or-undefined)
    value in the unpacked conditions."
    (:see-also Derivable::mOr))

  (and [&conditions [any]] (Derivable any)
    "Returns a derivable which represents the last value in {{&conditions}} iff
    all values are truthy when passed through {{unpack}}. Otherwise it represents
    whichever first value was falsey.

    ```javascript
    and(1, true, `yes`, `lastvalue`).get();
    // => `lastValue`

    and(1, true, 0, `lastvalue`).get();
    // => 0
    ```"
    (:see-also Derivable::and))

  (mAnd [&conditions [any]] (Derivable any)
    "Returns a derivable which represents the last value in {{&conditions}} iff
    all values are not null or undefined. Otherwise it returns null or
    undefined.")

  ((wrapPreviousState A B) [fn (=> [currentState A previousState A] B) init? A] (=> [currentState A] B)
    "Takes a function of two arguments. Returns a function which takes one argument.
    The returned function invokes the given function with the 'current' argument and
    the 'previous' argument. For the first invocation, the {{init?}} argument is
    passed as the 'previous' argument, or `undefined` if not given.

    Useful for doing 'diff'-based reactors. e.g. Facebook's React.

    ```js
    const adder = wrapPreviousState((a, b) => a + b, 0);

    adder(1); // => 1
    adder(1); // => 2
    adder(2); // => 3
    adder(2); // => 4
    adder(3); // => 5
    adder(3); // => 6
    ```
    ")

  (captureDereferences [fn (=> [] void)] [(Derivable any)]
    "Takes a function and executes it while capturing the set of derivables
    which are dereferenced. Returns an array of those derivables.")

  (setDebugMode [debugMode boolean] void
    "Enable or disable debug mode.

    This causes `Error`s to be created (but not thrown) alongside
    derivations in order to capture the stack trace at their point of instantiation.
    In case a derivation throws an error itself when being computed, its
    instantiation stack trace is logged such that it becomes easy to determine
    exactly which derivation is throwing. Creating errors is quite slow, so you
    probably should not keep this enabled for production.")

  (:interface
    Ticker
    "Tickers provide a facility for running reactions globally at custom
    intervals. Tickers have a lifecycle which begins when they are created by
    the {{ticker}} function and end when their `.release()` method is invoked.
    A ticker may not be used after it has been released.

    While at least one ticker is alive, the {{Atom::set}} method will not cause
    reactions to be run."
    (tick [] void
      "Runs all pending reactions")
    (release [] void
      "Releases this ticker, rendering it useless")
    (:see-also ticker))
  (ticker [] Ticker
    "Creates a new {{Ticker}}"))
