(:module havelock
  "Havelock is an holistic state management library. This is its API documentation.
  "

  (:interface (Derivable T)
    "A thing that is derivable"
    ((derive E) [f (=> [value T] E)] (Derivable E)
      "Creates a new derivation based on the application of {{f}} to the
      current value of this derivable. e.g.

      ```javascript
      const x = atom(4);
      const timesTwo = (n) => n * 2;
      const xTimesTwo = x.derive(timesTwo);

      xTimesTwo.get();
      // => 8
      ```"
    (:see-also havelock::derive))

    ((derive A E) [f (=> [value T a A] E) a A] (Derivable E)
      "Creates a new derivation based on the application of {{f}} to the
      current value of this derivable and {{a}}. e.g.

      ```javascript
      const x = atom(4);
      const times = (a, b) => a * b;
      const xTimesTwo = x.derive(times, 2);

      xTimesTwo.get();
      // => 8
      ```
      "
    (:see-also havelock::derive))

    ((derive A E) [f (=> [value T a A] E) a (Derivable A)] (Derivable E)
      "Creates a new derivation based on the application of {{f}} to the
      current value of this derivable and the value represented by {{a}}. e.g.

      ```javascript
      const y = atom(5);
      const xTimesY = x.derive(times, y);

      xTimesY.get();
      // => 20

      y.set(10);
      xTimesY.get();
      // => 40
      ```
      "
      (:see-also havelock::derive unpack))

    ((derive E) [f (=> [value T &args [any]] E) &args [any]] (Derivable E)
      "Any-arity version of above. Unpacks all args."
      (:see-also havelock::derive unpack))

    (reaction [r (Reaction T)] (Reaction T)
      "Creates a link between {{r}} and this derivable. {{r}} should be a 'fresh'
      reaction. i.e. it should not have been linked to any other derivable
      in the past. For examples see {{Reaction}}")

    (reaction [f (=> [value T] void)] (Reaction T)
      "Creates a new {{Reaction}} based on {{f}} being applied to this derivable. e.g.

      ```javascript
      const x = atom(4);
      const r = x.reaction(x => console.log(`x is`, x));

      x.set(8);

      // .reaction creats the reaction, but doesn't start it,
      // so nothing gets printed yet

      r.start();

      // now that the reaction has started it will respond
      // to changes in x

      x.set(16);
      // $> x is 16

      x.set(32);
      // $> x is 32
      ```")

    (react [r (Reaction T)] (Reaction T)
      "Creates a link between {{r}} and this derivable. Starts
      and forces the reaction before returning it. i.e.

      ```javascript
      derivable.react(r);
      ```

      is equivalent to

      ```javascript
      derivable.reaction(r).start().force();
      ```")

    (react [f (=> [value T] void)] (Reaction T)
      "Creates a new {{Reaction}} based on {{f}} being applied to this derivable.
      Starts and forces the reaction before returning it. i.e.

      ```javascript
      derivable.react(f);
      ```

      is equivalent to

      ```javascript
      derivable.reaction(f).start().force();
      ```")

    (get [] T
      "Returns the current value of this derivable.

      ```javascript
      const x = atom(`a string`);
      x.get();
      // => 'a string'
      ```")

    (is [other any] (Derivable boolean)
      "Returns a derivable which represents the equality of the values held in
      this and {{other}}.

      ```javascript
      let a = atom(`a`),
          b = atom(`b`);

      let same = a.is(b);

      same.get();
      // => false

      b.set(`a`);

      same.get();
      // => true
      ```
      ")

    (and [other any] (Derivable any)
      "Returns a derivable which represents the boolean AND composition of the
      values held in this and {{other}}.

      ```javascript
      const condition = atom(`truthy value`);

      const result = condition.and(`yes truthy`);

      result.get();
      // => `yes truthy`

      condition.set(false);

      result.get();
      // => false
      ```

      `other` can be a derivable.

      ```javascript
      const result2 = result.and(condition.derive(s => s.split(` `)[0]));

      result2.get();
      // => false

      condition.set(`some string`);

      result2.get();
      // => `some`
      ```

      Due to havelock's laziness, we can be sure that the derivation of
      `condition` (the string splitting bit) will only ever be evaluated
      when `condition` contains a truthy value.")

    (or [other any] (Derivable any)
      "Returns a derivable which represents the boolean OR composition of the
      values held in this and {{other}}.

      ```javascript
      const first = atom(`truthy value`);
      const second = atom(false);

      first.or(second).get();
      // => `truthy value`

      second.or(first).get();
      // => `truthy value`

      first.set(false);

      second.or(first).get();
      // => false

      first.set(`first`);
      second.set(`second`);

      first.or(second).get();
      // => `first`

      second.or(first).get();
      // => `second`
      ```")

    (then [thenD any, elseD any] (Derivable any)
      "Returns a derivable which represents the value of {{thenD}} if this is
      truthy, or {{elseD}} otherwise.

      Equivalent to:

      ```javascript
      this.and(thenD).or(elseD);
      ```")

    (not [] (Derivable boolean)
      "Returns a derivable which represents the boolean complement of the
      truthiness of the the value represented by this.

      Equivalent to:

      ```javascript
      this.derive(x => !x);
      ```")

    (switch [&args [any]] (Derivable any)
      "{{&args}} is a flat list of (comparatee, value) pairs. If the value
      represented by this derivable is equal to a comparatee (which can be derivable or not),
      a derivable representing the comparatee's corresponding value is returned. If none match,
      the value represented is `undefined` unless a trailing value is supplied.

      ```javascript
      const x = atom(3);

      const y = x.switch(
        1, `one`,
        2, `two`,
        3, `three`
      );

      y.get();
      // => `three`

      x.set(4);

      y.get();
      // => undefined

      const z = x.switch(
        5, `five`,
        6, `six`,
        `other`
      );

      z.get();
      // => `other`
      ```"))

  (:interface (Atom T)
    "Represents a mutable reference. Should hold immutable, or effectively
    immutable data."
    (:extends (Derivable T))
    ((set E) [value E] (Atom E)
      "Sets the value of this atom to be {{value}}, returns this atom")
    ((swap E) [f (=> [value T &args [any]] E), &args [any]] (Atom E)
      "Sets the value of this atom to be the value returned when {{f}} is applied
      to the current value of this and {{&args}}. Returns this.

      Equivalent to:

      ```javascript
      this.set(f.apply(null, [this.get()].concat(args)));
      ```"
      (:see-also havelock::swap))
    ((lens E) [lens (Lens T E)] (Atom E)
      "Returns a new atom connected to this one via the logic encapsulated by
      {{lens}}."

      (:see-also Lens)))

  (:interface (Lens ParentType ChildType)
    "The value returned from {{Atom::lens}} is a *lensed* atom. This is a kind
    of cross between an atom and a derivation.
    It acts as a mutable proxy for some base atom, which lets consumers modify
    the base atom without knowing precisely how. This knowledge is encoded in a
    lens as {{get}} and {{set}} functions.

    For example, you could (but probably shouldn't) store your entire
    application state as a json string, e.g.

    ```javascript
    const jsonState = atom(JSON.stringify({
      username: `Tigran`,
      sessionID: `x3rfs`
    }));
    ```

    and then use you could create a generic json lens to access and mutate properties
    within that string:

    ```javascript
    function jsonLens (prop) {
      return {
        get (json) {
          return JSON.parse(json)[prop];
        },
        set (json, value) {
          let state = JSON.parse(json);
          state[prop] = value;
          return JSON.stringify(state);
        }
      }
    }

    const username = jsonState.lens(jsonLens(`username`));

    username.get();
    // => `Tigran`

    username.set(`Franny`);

    jsonState.get();
    // => `{\"username\": \"Franny\", \"sessionID\": \"x3rfs\"}`

    username.get();
    // => `Franny`
    ```

    If someone has the `username` atom, they can be completely oblivious to the
    fact that it is an abstraction over a json string, treating it like a normal
    atom. This is the power of lenses!

    But lenses also *compose*!

    For example, if wanted to pass `username` to someone who can only read
    backwards, we could do the following:

    ```javascript
    function stringReverse (s) {
      let result = ``;
      for (let c of s) {
        result = c + result;
      }
      return result;
    }
    const reverseLens = {
      get: s => stringReverse(s),
      set: (_, s) => stringReverse(s)
    };

    const emanresu = username.lens(reverseLens);

    emanresu.get();
    // => `ynnarF`

    emanresu.set(`drahciR`);

    jsonState.get();
    // => `{\"username\": \"Richard\", \"sessionID\": \"x3rfs\"}`
    ```

    Now the poor soul who can only read backwards doesn't ever have to think
    about reversing strings ever again.
    "
    (get [source ParentType] ChildType
      "Returns the lensed value extracted from {{source}}.

      Called with `this` set to `null`.")
    (set [source ParentType, value ChildType] ParentType
      "Returns the transformed version of {{source}} which includes {{value}}.

      Called with `this` set to `null`."))

  (:class (Reaction T)
    "A Reaction is a stateful object which can be attached to a particular
    derivable. Changes in this derivable will cause a Reaction to be executed."
    (:constructor [])
    (start [] (Reaction T)
      "Starts this reaction. After this is called, any changes in the derivable
      to which the reaction is attached will cause the reaction's .{{react}}
      method to be called.

      Calls the {{onStart}} method if defined.")
    (stop [] (Reaction T)
      "Stops this reaction. Changes in the attached derivable will no longer
      cause reaction.

      Calls the {{onStop}} method if defined.")
    (force [] (Reaction T)
      "Forces reaction.")
    (react [value T] void
      (:note "*Abstract<br/>Required*")
      "This method is responsible for carrying out reactive side-effects based
      on {{value}}.")
    (onStart [] void
      (:note "*Abstract*")
      "Called when the reaction is started. Use for acquiring resources.")
    (onStop [] void
      (:note "*Abstract*")
      "Called when the reaction is stopped. Use for releasing resources."
      (:see-also stop start))
    )

  ((atom T) [value T] (Atom T)
    "Returns a new {{Atom}} containing {{value}}.

    ```javascript
    const myAtom = atom(`a string`);

    myAtom.get();
    // => `a string`
    ```")

  ((swap A B) [atom (Atom A) f (=> [a A &args [any]] B) &args [any]] B
    "Changes the contents of {{atom}} to be the result of {{f}} applied to
    {{atom}}'s current value and {{&args}}. Returns the new value."

    (:see-also Atom::swap))

  ((derivation T) [f (=> [] T)] (Derivable T)
    "Returns a new derivable encapsulating the result returned by `f` which
    should be pure aside from dereferencing one or more {{Derivable}}s.

    ```javascript
    const x = atom(1),
          y = atom(2);

    const z = derivation(() => x.get() + y.get());

    z.get();
    // => 3

    x.set(2);
    z.get();
    // => 4

    ```")

  ((derive I O) [d (Derivable I) f (=> [v I] O)] (Derivable O)
    "Functional interface to {{Derivable::derive}}."
    (:see-also Derivable::derive))

  ((derive I O A) [d (Derivable I) f (=> [v I a A] O) a A] (Derivable O)
    "Functional interface to {{Derivable::derive}}."
    (:see-also Derivable::derive))

  ((derive I O A) [d (Derivable I) f (=> [v I a A] O) a (Derivable A)] (Derivable O)
    "Functional interface to {{Derivable::derive}}."
    (:see-also Derivable::derive))

  ((derive I O) [d (Derivable I) f (=> [v I &args [any]] O) &args [any]] (Derivable O)
    "Functional interface to {{Derivable::derive}}."
    (:see-also Derivable::derive))

  (derive [strings [string] &things [any]] (Derivable string)
    "Tagged template string version of derive. Returns a derivable which
    represents {{strings}} interploated with {{&things}}, which latter may
    contain derivables.

    ```javascript
    const myAtom = atom(`what`),
          myConstant = 4;

    const myString =
      derive`Atom: '${myAtom}', constant: ${myConstant}.`;

    myString.get();
    // => `Atom: 'what', constant: 4.`

    myAtom.set(`nothing`);

    myString.get();
    // => `Atom: 'nothing', constant: 4.`

    ```")

  (transact [f (=> [] void)] void
    "Executes {{f}} in the context of a transaction.

    In a transactional context, changes to atoms do not have side effects. All
    changes made during the transaction are propagated for side effects when the
    transaction commits.

    ```javascript
    const firstName = `Joe`,
          lastName = `Schmoe`;

    derive`My name is ${firstName} ${lastName}`.react(
      x => console.log(x);
    );
    // $> My name is Joe Schmoe
    ```

    All good, but now we want to change the name to Tigran Hamasayan.

    ```javascript
    firstName.set(`Tigran`);
    // $> My name is Tigran Schmoe
    ```

    Doh! Tigran Schmoe isn't a person! We certainly don't want reactions to think
    he is, that could be totally confusing for someone.

    {{transact}} to the rescue! Let's abort the previous mission and try changing
    the name to William Blake without ever having a William Schmoe.

    ```javascript
    transact(() => {
      firstName.set(`William`);
      lastName.set(`Blake`);
    });
    // $> My name is William Blake
    ```

    Success!
    ")

  (transaction
    [f (=> [&args [any]] any)]
    (=> [&args [any]] any)
    "Wraps {{f}} such that its body is executed in a transaction. Preserves
    its input and output semantics.

    ```javascript
    const firstName = `Joe`,
    lastName = `Schmoe`;

    derive`My name is ${firstName} ${lastName}`.react(
      x => console.log(x);
    );
    // $> My name is Joe Schmoe

    setTimeout(transaction(() => {
      firstName.set(`William`);
      lastName.set(`Blake`);
    }), 1000);

    // ... 1 second later ...
    // $> My name is William Blake
    ```"
    (:see-also transact))

  (unpack [obj any] any
    "If {{obj}} is derivable, returns `obj.get()`, otherwise returns {{obj}}.")

  (struct [obj any] (Derivable any)
    "Given some plain JavaScript `Object` or `Array` (or some nested combination thereof)
    containing one or more derivable things,
    returns a new derivable representing the input collection with unpacked
    values. e.g.

    ```javascript
    const a = atom(`Andrew`),
          b = atom(`Bernice`),
          c = atom(`Charlie`);

    const together = struct({a: a, bandc: [b, c]});

    together.react(names => {
      console.log(`A stands for ${names.a}`);
      console.log(`B stands for ${names.bandc[0]}`);
      console.log(`C stands for ${names.bandc[1]}`);
    });
    // $> A stands for Andrew
    // $> B stands for Bernice
    // $> C stands for Charlie

    c.set(`Chris`);
    // $> A stands for Andrew
    // $> B stands for Bernice
    // $> C stands for Chris
    ```")

  (ifThenElse [condition (Derivable any) thenD any elseD any] (Derivable any)
    "Returns a derivable which encapsulates the value `unpack(thenD)` when the
    value encapsulated by {{condition}} is truthy, and `unpack(elseD)` when it is
    falsey.

    ```javascript
    const condition = atom(true);

    const thenD = atom(`then`);
    const elseD = `else`;

    const result = ifThenElse(condition, thenD, elseD);

    result.get();
    // => `then`

    condition.set(false);

    result.get();
    // => `else`
    ```"

    (:see-also unpack Derivable::then))

  (or [&conditions [any]] (Derivable any)
    "Returns a derivable which encapsulates the first value in {{&conditions}}
    which is truthy when passed through {{unpack}};

    ```javascript
    or(false, false, null, undefined, 0, ``, `yes`).get();
    // => `yes`

    or(atom(false),
       atom(null),
       atom(undefined),
       atom(0),
       atom(``),
       atom(`yes`)).get();
    // => `yes`
    ```"
    (:see-also Derivable::or))

  (and [&conditions [any]] (Derivable any)
    "Returns a derivable which represents the last value in {{&conditions}} iff
    all values are truthy when passed through {{unpack}}. Otherwise it represents
    whichever first value was falsey.

    ```javascript
    and(1, true, `yes`, `lastvalue`).get();
    // => `lastValue`

    and(1, true, 0, `lastvalue`).get();
    // => 0
    ```"
    (:see-also Derivable::and))

  (not [d (Derivable any)] (Derivable boolean)
    "Returns a derivable which represents the boolean complement of the
    truthiness of the value encapsulated by {{d}}.

    A functional interface to the {{Derivable::not}} method.")

  (switchCase [d (Derivable any) &args [any]] (Derivable any)
    "Functional interface to the {{Derivable::switch}} method.

    ```javascript
    switchCase(d, ...args);
    ```

    is equivalent to

    ```javascript
    d.switch(...args);
    ```")

  ((get T) [d (Derivable T)] T
    "Functional interface to the {{Derivable::get}} method.

    ```javascript
    get(d);
    ```

    is equivalent to

    ```javascript
    d.get();
    ```")

  ((set A B) [a (Atom A) v B] (Atom B)
    "Functional interface to the {{Atom::set}} method.

    ```javascript
    set(a, v);
    ```

    is equivalent to

    ```javascript
    a.set(v);
    ```")

  ((lens A B) [atom (Atom A) lens (Lens A B)] (Atom B)
    "A functional interface to the {{Atom::lens}} method.

    ```javascript
    lens(a, l);
    ```

    is equivalent to

    ```javascript
    a.lens(l);
    ```")

  (lift [f (=> [&args [any]] any)] (=> [&args [(Derivable any)]] (Derivable any))
    "Lifts a function that works on normal values to work on derivable values.

    ```javascript
    const add = (a, b) => a + b,
          x = atom(5),
          y = atom(10);

    const addD = lift(add);

    const xplusy = addD(x, y);

    xplusy.get();
    // => 15

    x.set(20);

    xplusy.get();
    // => 30
    ```")

  (isAtom [obj any] boolean
    "Returns true iff {{obj}} is an {{Atom}}.")

  (isDerivable [obj any] boolean
    "Returns true iff {{obj}} is a {{Derivable}}.")

  (isDerivation [obj any] boolean
    "Returns true iff {{obj}} is a derivation,
    i.e. a derivable which is not an atom.")

  (isLensed [obj any] boolean
    "Returns true iff {{obj}} is a *lensed* atom."
    (:see-also Lens Atom::lens))

  (isReaction [obj any] boolean
    "Returns true iff `obj` is a {{Reaction}}.")

  (withEquality [equals (=> [a any b any] boolean)] any
    "Returns a new instance of havelock with a new notion of equality. Does not
    affect the current instance.")

  (defaultEquals [a any b any] boolean
    "Havelock's inbuilt equality-checking function. Note that calling
    {{withEquality}} will not affect the value of this property.")

  (:interface
    Ticker
    "Tickers provide a facility for running reactions globally at custom
    intervals. Tickers have a lifecycle which begins when they are created by
    the {{ticker}} function and end when their `.release()` method is invoked.
    A ticker may not be used after it has been released.

    While at least one ticker is alive, the {{Atom::set}} method will not cause
    reactions to be run."
    (tick [] void
      "Runs all pending reactions")
    (release [] void
      "Releases this ticker, rendering it useless")
    (:see-also ticker))
  (ticker [] Ticker
    "Creates a new {{Ticker}}")
  )
